{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Chat","messages","setMessages","useState","input","setInput","selectedLanguage","setSelectedLanguage","voices","setVoices","englishVoice","setEnglishVoice","speakText","text","callback","voice","find","lang","window","utterance","SpeechSynthesisUtterance","onend","speechSynthesis","speak","console","log","useEffect","loadVoices","availableVoices","getVoices","defaultVoice","onvoiceschanged","React","createElement","className","htmlFor","id","value","onChange","e","target","map","index","key","name","msg","sender","speakableText","onClick","type","placeholder","async","trim","newMessage","response","fetch","method","headers","Content-Type","body","JSON","stringify","message","data","json","prevMessages","reply","error","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","App"],"mappings":"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","file":"static/js/main.14133e14.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Chat.css';\n\nconst Chat = () => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [selectedLanguage, setSelectedLanguage] = useState('en-US'); // Default language (English)\n\n  const [voices, setVoices] = useState([]);\n  const [englishVoice, setEnglishVoice] = useState(null);\n\n  useEffect(() => {\n    // Function to load voices and update available voices list\n    const loadVoices = () => {\n      const availableVoices = window.speechSynthesis.getVoices();\n      setVoices(availableVoices);\n\n      const defaultVoice = availableVoices.find(voice => voice.lang === selectedLanguage);\n      setEnglishVoice(defaultVoice);\n    };\n\n    loadVoices();\n\n    // This event fires when voices are loaded/changed in the browser\n    window.speechSynthesis.onvoiceschanged = loadVoices;\n  }, [selectedLanguage]);\n\n  // Speak text function with dynamic language selection\n  function speakText(text, callback) {\n    const voice = voices.find(voice => voice.lang === selectedLanguage);\n\n    if ('speechSynthesis' in window && voice) {\n      const utterance = new SpeechSynthesisUtterance(text);\n      utterance.voice = voice;\n\n      // Callback after speech has finished\n      utterance.onend = () => {\n        if (callback) callback();\n      };\n\n      window.speechSynthesis.speak(utterance);\n    } else {\n      console.log(\"Text-to-Speech is not supported in this browser.\");\n    }\n  }\n\n  const sendMessage = async () => {\n    if (input.trim() === '') return;\n\n    const newMessage = { sender: 'You', text: input };\n    setMessages([...messages, newMessage]);\n\n    //'http://18.177.15.188:3001/chat'\n    try {\n      const response = await fetch('http://localhost:3001/chat', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ message: input }),\n      });\n\n      const data = await response.json();\n\n      setMessages((prevMessages) => {\n        const updatedMessages = [\n          ...prevMessages,\n          { sender: 'AI', text: data.reply, speakableText: data.reply }, // Add the text for later playback\n        ];\n        return updatedMessages;\n      });\n\n      // Speak the AI's response with the selected language\n      speakText(data.reply); \n    } catch (error) {\n      console.error('Error:', error);\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { sender: 'AI', text: 'Oops, something went wrong!' },\n      ]);\n    }\n\n    setInput('');\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"language-selector\">\n        <label htmlFor=\"language-select\">Choose language: </label>\n        <select\n          id=\"language-select\"\n          value={selectedLanguage}\n          onChange={(e) => setSelectedLanguage(e.target.value)}\n        >\n          {voices.map((voice, index) => (\n            <option key={index} value={voice.lang}>\n              {voice.name} ({voice.lang})\n            </option>\n          ))}\n        </select>\n      </div>\n\n      <div className=\"message-list\">\n        {messages.map((msg, index) => (\n          <div key={index} className={`message ${msg.sender === 'AI' ? 'incoming' : 'outgoing'}`}>\n            <strong>{msg.sender}:</strong> {msg.text}\n            {msg.sender === 'AI' && msg.speakableText && (\n              <button onClick={() => speakText(msg.speakableText)}>ðŸ”Š Playback</button>\n            )}\n          </div>\n        ))}\n      </div>\n      \n      <div className=\"input-container\">\n        <input\n          type=\"text\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          placeholder=\"Type your message...\"\n        />\n        <button onClick={sendMessage}>Send</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Chat;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}